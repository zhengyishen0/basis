---
import { cn } from '@/lib/utils';

export interface Props {
  value?: string;
  className?: string;
  item?: any;
  [key: string]: any;
}

const {
  value,
  className,
  item,
  ...alpineProps
} = Astro.props;

// Generate unique ID if not provided
const menuId = value || (item?.id) || `nav-item-${Math.random().toString(36).substring(2, 11)}`;
---

<div
  x-data={item ? `{
    menuId: item.id || '${menuId}',
    get isOpen() {
      return activeMenu === this.menuId;
    },
    get hasContent() {
      return item.type !== 'link' && item.links && item.links.length > 0;
    }
  }` : `{
    menuId: '${menuId}',
    get isOpen() {
      return activeMenu === this.menuId;
    },
    get hasContent() {
      return !!$el.querySelector('[data-navigation-menu-content]');
    }
  }`}
  @mouseenter="!keyboardActive && hasContent && openMenu(menuId)"
  @mouseleave="!keyboardActive && hasContent && scheduleClose(menuId)"
  @focusin="cancelClose(); hasContent && openMenu(menuId)"
  class={cn('relative', className)}
  data-navigation-menu-item
  {...alpineProps}
>
  {item ? (
    // Dynamic item rendering
    <>
      <!-- Link type -->
      <template x-if="item.type === 'link'">
        <div>
          <slot name="link" />
        </div>
      </template>
      
      <!-- Menu types (list, grid, feature) -->
      <template x-if="item.type !== 'link'">
        <div>
          <slot name="trigger" />
          <slot name="content" />
        </div>
      </template>
    </>
  ) : (
    // Static rendering
    <slot />
  )}
</div>