---
import { cn } from '@/lib/utils';

export interface Props {
    class?: string;
    [key: string]: any;
}

const { class: className, ...alpineProps } = Astro.props;

const classes = cn(
    'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors',
    'hover:bg-accent hover:text-accent-foreground',
    'data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground',
    'data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',
    className
);


// Extract x-for and x-key from alpineProps so they don't get passed to the div
const { 'x-for': xFor, 'x-key': xKey, ...restProps } = alpineProps;
---

{
  xFor ? (
    <template x-for={xFor} x-key={xKey}>
        <div
            x-on:click="!item.disabled && selectItem(item)"
            x-on:mouseenter="!item.disabled && (commandActiveIndex = flattenedItems.findIndex(i => i === item))"
            :data-selected="flattenedItems[commandActiveIndex] === item"
            :data-disabled="item.disabled"
            class={classes}
            role="option"
            :aria-selected="flattenedItems[commandActiveIndex] === item"
            :aria-disabled="item.disabled"
            {...restProps}
        >
            <slot />
        </div>
    </template>
  ) : (
    <div
        class={classes}
        role="option"
        {...restProps}
    >
        <slot />
    </div>
  )
}
