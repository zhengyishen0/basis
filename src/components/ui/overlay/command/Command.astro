---
import Dialog from '../dialog/Dialog.astro';
import DialogContent from '../dialog/DialogContent.astro';
import MenuContainer from '../menu/MenuContainer.astro';
import { cva, type VariantProps } from 'class-variance-authority';

const commandVariants = cva(
  'flex w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',
  {
    variants: {
      variant: {
        default: 'border border-border shadow-md',
        ghost: 'border-0 shadow-none',
        dialog: 'border-0 shadow-lg'
      },
      size: {
        sm: 'h-60',
        md: 'h-80', 
        lg: 'h-96',
        full: 'h-full'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'md'
    }
  }
);

export interface Props extends VariantProps<typeof commandVariants> {
  items?: Record<string, Array<{
    title: string;
    value: string;
    icon?: string; // Icon name (e.g., 'calendar') or SVG string
    shortcut?: string;
    show?: boolean;
    disabled?: boolean;
  }>>;
  placeholder?: string;
  emptyText?: string;
  onSelect?: string;
  trigger?: 'click' | 'hover' | 'focus' | 'rightclick' | 'manual';
  keyboardShortcut?: string;
  class?: string;
  [key: string]: any;
}

const {
  items = {},
  placeholder = 'Type a command or search...',
  emptyText = 'No results found.',
  onSelect = 'console.log(item)',
  trigger = 'manual',
  keyboardShortcut = 'cmd+k',
  variant,
  size,
  class: className,
  ...alpineProps
} = Astro.props;

// Parse keyboard shortcut
const shortcutKey = keyboardShortcut.includes('cmd+') ? keyboardShortcut.split('cmd+')[1] : keyboardShortcut;
const withMeta = keyboardShortcut.includes('cmd+') || keyboardShortcut.includes('ctrl+');
---

<Dialog 
  x-data={`{
    ...this,
    init() {
      // Add keyboard shortcut listener
      this.$nextTick(() => {
        const handleKeydown = (e) => {
          if (${withMeta ? '(e.metaKey || e.ctrlKey)' : 'true'} && e.key.toLowerCase() === '${shortcutKey.toLowerCase()}') {
            e.preventDefault();
            this.toggle();
            if (this.open) {
              // Focus the search input when opened
              this.$nextTick(() => {
                const input = document.querySelector('[role="dialog"] input');
                if (input) input.focus();
              });
            }
          }
        };
        
        document.addEventListener('keydown', handleKeydown);
        this.$cleanup = () => document.removeEventListener('keydown', handleKeydown);
      });
    },
    destroy() {
      if (this.$cleanup) this.$cleanup();
    }
  }`}
  class={className}
  {...alpineProps}
>
  <!-- Trigger slot for button/trigger element -->
  <slot name="trigger" />
  
  <!-- Command dialog content -->
  <DialogContent 
    variant="center"
    size="md"
    class="w-96 max-w-sm p-0"
  >
    <MenuContainer
      items={items}
      searchEnabled={true}
      keyboardNav={true}
      searchModel="commandSearch"
      activeModel="commandActiveIndex"
      itemsModel="commandItems"
      emptyText={emptyText}
      onSelect={`${onSelect}; close()`}
      variant={variant}
      size={size}
    >
      <slot name="input" slot="input" />
      <slot />
      <slot name="footer" slot="footer" />
    </MenuContainer>
  </DialogContent>
</Dialog>