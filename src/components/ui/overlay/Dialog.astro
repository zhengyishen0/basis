---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const dialogVariants = cva(
  'fixed z-[99] flex focus:outline-none',
  {
    variants: {
      variant: {
        center: 'inset-0 items-center justify-center',
        left: 'inset-y-0 left-0 items-center',
        right: 'inset-y-0 right-0 items-center', 
        top: 'inset-x-0 top-0 justify-center',
        bottom: 'inset-x-0 bottom-0 justify-center',
        fullscreen: 'inset-0'
      },
      backdrop: {
        dark: 'bg-black/50',
        blur: 'bg-black/20 backdrop-blur-sm', 
        none: ''
      }
    },
    defaultVariants: {
      variant: 'center',
      backdrop: 'dark'
    }
  }
);

const contentVariants = cva(
  'relative bg-background text-foreground shadow-lg outline-none transition-all',
  {
    variants: {
      variant: {
        center: 'rounded-lg border mx-4 my-8',
        left: 'h-full w-full max-w-sm border-r',
        right: 'h-full w-full max-w-sm border-l',
        top: 'w-full max-h-[80vh] rounded-b-lg border-b border-x mx-4',
        bottom: 'w-full max-h-[80vh] rounded-t-lg border-t',
        fullscreen: 'w-full h-full'
      },
      size: {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg', 
        xl: 'max-w-xl',
        '2xl': 'max-w-2xl',
        '3xl': 'max-w-3xl',
        full: 'max-w-full'
      },
      theme: {
        default: 'bg-background border-border',
        dark: 'bg-gray-900 border-gray-700 text-white',
        minimal: 'bg-white border-gray-200 shadow-sm'
      }
    },
    compoundVariants: [
      {
        variant: ['left', 'right', 'fullscreen'],
        size: ['sm', 'md', 'lg', 'xl', '2xl', '3xl'],
        class: 'max-w-none'
      }
    ],
    defaultVariants: {
      variant: 'center',
      size: 'md',
      theme: 'default'
    }
  }
);

export interface Props extends VariantProps<typeof dialogVariants>, VariantProps<typeof contentVariants> {
  // Content props (for simple usage)
  title?: string;
  description?: string;
  closeable?: boolean;
  
  // Behavior
  trigger?: 'click' | 'hover' | 'manual';
  lockScroll?: boolean;
  
  // Draggable (for bottom/top variants)
  draggable?: boolean;
  snapPoints?: string[];
  
  // Styling
  className?: string;
  triggerClassName?: string;
  contentClassName?: string;
  headerClassName?: string;
  footerClassName?: string;
  
  // Alpine.js pass-through
  [key: string]: any;
}

const {
  variant = 'center',
  backdrop = 'dark',
  size = 'md',
  theme = 'default',
  title,
  description,
  closeable = true,
  trigger = 'click',
  lockScroll = true,
  draggable = false,
  snapPoints = ['25%', '50%', '90%'],
  className,
  triggerClassName,
  contentClassName,
  headerClassName,
  footerClassName,
  ...alpineProps
} = Astro.props;

// Generate unique ID for accessibility
const dialogId = `dialog-${Math.random().toString(36).substr(2, 9)}`;

// Determine if this is a drawer (draggable bottom/top)
const isDrawer = draggable && (variant === 'bottom' || variant === 'top');
---

<!-- 
Dialog Component - Viewport Overlays

Usage Examples:
1. Modal (center):
<Dialog title="Settings" size="lg">
  <Button slot="trigger">Open Settings</Button>
  <SettingsForm />
  <div slot="footer">
    <Button @click="close()">Cancel</Button>
    <Button>Save</Button>
  </div>
</Dialog>

2. Sheet (side panel):
<Dialog variant="right" title="Navigation">
  <Button slot="trigger">Menu</Button>
  <NavigationLinks />
</Dialog>

3. Drawer (draggable bottom):
<Dialog variant="bottom" draggable={true} snapPoints={['30%', '80%']}>
  <Button slot="trigger">Open Filters</Button>
  <FilterPanel />
</Dialog>

4. Full screen:
<Dialog variant="fullscreen" theme="dark">
  <Button slot="trigger">View Gallery</Button>
  <ImageGallery />
  <div slot="navigation">
    <Button @click="prev()">Previous</Button>
    <Button @click="next()">Next</Button>
  </div>
</Dialog>

Features:
- Multiple positioning variants (center, sides, top, bottom, fullscreen)
- Configurable backdrop (dark, blur, none)
- Body scroll locking
- Draggable drawers with snap points
- Focus trapping and keyboard navigation
- Full Alpine.js integration
- Accessible with proper ARIA attributes
-->

<div 
  x-data="{ 
    open: false,
    toggle() { this.open = !this.open },
    close() { this.open = false }
  }"
  @keydown.escape.window="open && close()"
  class="relative"
  {...alpineProps}
>
  <!-- Trigger -->
  <div 
    @click="toggle()"
    :aria-expanded="open"
    :aria-controls="'${dialogId}'"
    class={cn("inline-block", triggerClassName)}
  >
    <slot name="trigger" />
  </div>
  
  <!-- Dialog Overlay -->
  <template x-teleport="body">
    <div 
      x-show="open"
      x-transition:enter="ease-out duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="ease-in duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      class={cn(dialogVariants({ variant, backdrop }), className)}
      @click="closeable && close()"
      style="display: none;"
    >
      <!-- Dialog Content -->
      <div 
        x-show="open"
        @click.stop
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start={`opacity-0 ${
          variant === 'center' ? 'scale-95' :
          variant === 'left' ? '-translate-x-full' :
          variant === 'right' ? 'translate-x-full' :
          variant === 'top' ? '-translate-y-full' :
          variant === 'bottom' ? 'translate-y-full' :
          variant === 'fullscreen' ? 'scale-95' : 'scale-95'
        }`}
        x-transition:enter-end="opacity-100 translate-x-0 translate-y-0 scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-x-0 translate-y-0 scale-100"
        x-transition:leave-end={`opacity-0 ${
          variant === 'center' ? 'scale-95' :
          variant === 'left' ? '-translate-x-full' :
          variant === 'right' ? 'translate-x-full' :
          variant === 'top' ? '-translate-y-full' :
          variant === 'bottom' ? 'translate-y-full' :
          variant === 'fullscreen' ? 'scale-95' : 'scale-95'
        }`}
        data-dialog-content
        id={dialogId}
        class={cn(
          contentVariants({ variant, size, theme }),
          contentClassName
        )}
        role="dialog"
        aria-modal="true"
        :aria-labelledby="'${dialogId}-title'"
        :aria-describedby="'${dialogId}-description'"
      >
        <!-- Drag Handle (for drawers) -->
        {isDrawer && (
          <div class="flex justify-center py-2">
            <div class="w-10 h-1 bg-gray-300 rounded-full"></div>
          </div>
        )}
        
        <!-- Header -->
        {(Astro.slots.header || title || description || closeable) && (
          <header 
            class={cn(
              "flex items-center justify-between",
              variant === 'fullscreen' ? 'p-6 border-b' : 'p-6 pb-0',
              headerClassName
            )}
          >
            <div class="flex-1 min-w-0">
              {title && (
                <h2 
                  id={`${dialogId}-title`}
                  class="text-lg font-semibold leading-none tracking-tight"
                >
                  {title}
                </h2>
              )}
              {description && (
                <p 
                  id={`${dialogId}-description`}
                  class="text-sm text-muted-foreground mt-1"
                >
                  {description}
                </p>
              )}
              <slot name="header" />
            </div>
            
            {closeable && (
              <button 
                @click="close()"
                class="ml-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none"
                aria-label="Close dialog"
              >
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            )}
          </header>
        )}
        
        <!-- Content -->
        <main 
          class={cn(
            "flex-1",
            variant === 'fullscreen' ? 'p-6' : 'p-6',
            (variant === 'left' || variant === 'right') && 'overflow-y-auto'
          )}
        >
          <slot name="content" />
          <slot />
        </main>
        
        <!-- Footer -->
        {Astro.slots.footer && (
          <footer 
            class={cn(
              "flex items-center justify-end gap-2 p-6 pt-0",
              variant === 'fullscreen' && 'border-t',
              footerClassName
            )}
          >
            <slot name="footer" />
          </footer>
        )}
        
        <!-- Navigation (for fullscreen) -->
        {Astro.slots.navigation && variant === 'fullscreen' && (
          <div 
            class="absolute inset-x-0 bottom-6 flex items-center justify-center gap-4"
          >
            <slot name="navigation" />
          </div>
        )}
      </div>
    </div>
  </template>
</div>