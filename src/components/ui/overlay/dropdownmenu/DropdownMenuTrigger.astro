---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const triggerVariants = cva(
    'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium tracking-wide transition-colors duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer',
    {
        variants: {
            variant: {
                default: 'bg-primary text-primary-foreground hover:bg-primary/90',
                destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
                success: 'bg-success text-success-foreground hover:bg-success/90',
                warning: 'bg-warning text-warning-foreground hover:bg-warning/90',
                info: 'bg-info text-info-foreground hover:bg-info/90',
                outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
                secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
                ghost: 'hover:bg-accent hover:text-accent-foreground',
                link: 'text-primary underline-offset-4 hover:underline'
            },
            size: {
                xs: 'h-7 px-2 text-xs',
                sm: 'h-8 px-3 text-xs',
                default: 'h-9 px-4 py-2 text-sm',
                md: 'h-10 px-6 py-2 text-base',
                lg: 'h-11 px-8 text-lg',
                icon: 'h-9 w-9'
            },
        },
        defaultVariants: {
            variant: 'default',
            size: 'default',
        },
    }
);

export interface Props extends VariantProps<typeof triggerVariants> {
    disabled?: boolean;
    className?: string;
    [key: string]: any;
}

const {
    variant = 'default',
    size = 'default',
    disabled = false,
    className,
    ...alpineProps
} = Astro.props;
---

<div
    x-ref="dropdownTrigger"
    @click="trigger === 'click' && !disabled && toggle()"
    @mouseenter="trigger === 'hover' && !disabled && (open = true)"
    @mouseleave="trigger === 'hover' && !disabled && (open = false)"
    @focus="trigger === 'focus' && !disabled && (open = true)"
    @blur="trigger === 'focus' && !disabled && (open = false)"
    :aria-expanded="open"
    :aria-haspopup="true"
    class={cn(
        triggerVariants({ variant, size }),
        disabled && 'pointer-events-none opacity-50',
        className
    )}
    role="button"
    tabindex={disabled ? '-1' : '0'}
    aria-disabled={disabled ? 'true' : 'false'}
    {...alpineProps}
>
    <slot />
</div>