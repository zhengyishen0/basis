---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const popupVariants = cva(
  'absolute z-[1000] rounded-md border bg-popover text-popover-foreground shadow-md outline-none',
  {
    variants: {
      size: {
        sm: 'max-w-xs',
        md: 'max-w-sm', 
        lg: 'max-w-md',
        xl: 'max-w-lg',
        auto: 'w-auto'
      },
      theme: {
        default: 'bg-popover border-border',
        dark: 'bg-gray-900 border-gray-700 text-white',
        minimal: 'bg-white border-gray-200 shadow-sm'
      }
    },
    defaultVariants: {
      size: 'md',
      theme: 'default'
    }
  }
);

export interface Props extends VariantProps<typeof popupVariants> {
  // Positioning
  placement?: 'top' | 'bottom' | 'left' | 'right' | 'auto';
  
  // Behavior
  trigger?: 'click' | 'hover' | 'focus' | 'manual';
  dismiss?: 'auto' | 'manual' | 'selection';
  
  // Visual
  arrow?: boolean;
  offset?: number;
  
  // Timing
  delay?: number;
  
  // Content shortcuts (for simple usage)
  text?: string; // For tooltip-like usage
  items?: Array<{
    label: string;
    value?: any;
    onClick?: () => void;
    disabled?: boolean;
    separator?: boolean;
  }>; // For dropdown-like usage
  
  // Styling
  className?: string;
  triggerClassName?: string;
  contentClassName?: string;
  
  // Alpine.js pass-through
  [key: string]: any;
}

const {
  placement = 'auto',
  trigger = 'hover',
  dismiss = 'manual',
  arrow = true,
  offset = 8,
  delay = 0,
  text,
  items,
  size,
  theme,
  className,
  triggerClassName,
  contentClassName,
  ...alpineProps
} = Astro.props;

// Generate unique ID for accessibility
const popupId = `popup-${Math.random().toString(36).substr(2, 9)}`;
---

<!-- 
Popup Component - Positioned Overlays

Usage Examples:
1. Tooltip:
<Popup trigger="hover" placement="top" dismiss="auto" text="Help text">
  <Button>Save</Button>
</Popup>

2. Popover:
<Popup trigger="click" placement="bottom">
  <Button slot="trigger">More Options</Button>
  <div class="p-4">
    <h3>Additional Options</h3>
    <p>Rich content here...</p>
  </div>
</Popup>

3. Dropdown:
<Popup trigger="click" dismiss="selection" items={menuItems}>
  <Button slot="trigger">Actions</Button>
</Popup>

Features:
- Smart positioning with viewport edge detection
- Multiple trigger types (click, hover, focus, manual)
- Auto-dismiss, manual dismiss, or selection dismiss
- Optional arrow pointer
- Configurable offset and delay
- Text shortcut for tooltips
- Items array shortcut for dropdowns
- Full Alpine.js integration
-->

<div 
  x-data="{ 
    open: false,
    toggle() { this.open = !this.open },
    close() { this.open = false }
  }"
  @click.outside="open && close()"
  @keydown.escape.window="open && close()"
  class="relative inline-block"
  {...alpineProps}
>
  <!-- Trigger -->
  <div 
    @click={trigger === 'click' ? 'toggle()' : ''}
    @mouseenter={trigger === 'hover' ? 'open = true' : ''}
    @mouseleave={trigger === 'hover' ? 'open = false' : ''}
    :aria-expanded="open"
    :aria-controls="'${popupId}'"
    class={cn("inline-block", triggerClassName)}
  >
    <slot name="trigger" />
    <slot />
  </div>
  
  <!-- Popup Content -->
  <div 
    x-show="open"
    x-transition:enter="ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="ease-in duration-150" 
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    @mouseenter={trigger === 'hover' ? 'open = true' : ''}
    @mouseleave={trigger === 'hover' ? 'open = false' : ''}
    id={popupId}
    class={cn(
      popupVariants({ size, theme }),
      'absolute top-full left-0 mt-2 z-50',
      className,
      contentClassName
    )}
    style="display: none;"
    role="dialog"
    :aria-labelledby="'${popupId}-title'"
  >
      <!-- Arrow (simplified) -->
      {arrow && (
        <div class="absolute w-2 h-2 bg-popover border rotate-45 top-[-4px] left-4"></div>
      )}
      
      <!-- Content -->
      <div class="relative">
        <!-- Text content (for tooltip-like usage) -->
        {text && (
          <div class="px-3 py-2 text-sm">{text}</div>
        )}
        
        <!-- Items content (for dropdown-like usage) -->
        {items && (
          <div class="py-1">
            {items.map((item, index) => (
              item.separator ? (
                <div key={index} class="h-px bg-border mx-1 my-1"></div>
              ) : (
                <button 
                  key={index}
                  @click="close()"
                  disabled={item.disabled}
                  class="w-full px-3 py-2 text-sm text-left hover:bg-accent hover:text-accent-foreground disabled:opacity-50 disabled:pointer-events-none"
                >
                  {item.label}
                </button>
              )
            ))}
          </div>
        )}
        
        <!-- Slot content (for rich content) -->
        {!text && !items && (
          <div>
            <slot name="content" />
          </div>
        )}
      </div>
  </div>
</div>