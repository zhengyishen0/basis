---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { ChevronUp } from 'lucide-astro';

const popupVariants = cva(
    'absolute z-popover rounded-md border bg-popover text-popover-foreground shadow-md outline-none',
    {
        variants: {
            size: {
                sm: 'max-w-xs',
                md: 'max-w-sm',
                lg: 'max-w-md',
                xl: 'max-w-lg',
                auto: 'w-auto',
            },
            theme: {
                default: 'bg-popover border-border',
                dark: 'bg-gray-900 border-gray-700 text-white',
                minimal: 'bg-white border-gray-200 shadow-sm',
            },
            placement: {
                top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',
                bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',
                left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',
                right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',
                auto: 'top-full left-1/2 transform -translate-x-1/2 mt-2',
            },
        },
        defaultVariants: {
            size: 'md',
            theme: 'default',
            placement: 'auto',
        },
    }
);

export interface Props extends VariantProps<typeof popupVariants> {
    // Behavior
    trigger?: 'click' | 'hover' | 'focus' | 'manual';
    dismiss?: 'auto' | 'manual' | 'selection';

    // Timing
    delay?: number;

    // Styling
    className?: string;
    triggerClassName?: string;
    contentClassName?: string;

    // Alpine.js pass-through
    [key: string]: any;
}

const {
    placement = 'auto',
    trigger = 'hover',
    dismiss = 'manual',
    delay = 0,
    size,
    theme,
    className,
    triggerClassName,
    contentClassName,
    ...alpineProps
} = Astro.props;

// Generate unique ID for accessibility
const popupId = `popup-${Math.random().toString(36).substr(2, 9)}`;
---

<!-- 
Popup Component - Positioned Overlays

Usage Examples:
1. Tooltip:
<Popup trigger="hover" placement="top" dismiss="auto" text="Help text">
  <Button>Save</Button>
</Popup>

2. Popover:
<Popup trigger="click" placement="bottom">
  <Button slot="trigger">More Options</Button>
  <div class="p-4">
    <h3>Additional Options</h3>
    <p>Rich content here...</p>
  </div>
</Popup>

3. Dropdown:
<Popup trigger="click" dismiss="selection" items={menuItems}>
  <Button slot="trigger">Actions</Button>
</Popup>

Features:
- Smart positioning with viewport edge detection
- Multiple trigger types (click, hover, focus, manual)
- Auto-dismiss, manual dismiss, or selection dismiss
- Optional arrow pointer
- Configurable offset and delay
- Text shortcut for tooltips
- Items array shortcut for dropdowns
- Full Alpine.js integration
-->
<div
    x-data="{ 
    open: false,
    toggle() { this.open = !this.open },
    close() { this.open = false }
  }"
    @click.outside="open && close()"
    @keydown.escape.window="open && close()"
    class="relative inline-block"
    {...alpineProps}
>
    <!-- Trigger -->
    <div
        @click={trigger === 'click' ? 'toggle()' : ''}
        @mouseenter={trigger === 'hover' ? 'open = true' : ''}
        @mouseleave={trigger === 'hover' ? 'open = false' : ''}
        :aria-expanded="open"
        :aria-controls="'${popupId}'"
        class={cn('inline-block', triggerClassName)}
    >
        <slot name="trigger" />
        <slot />
    </div>

    <!-- Popup Content -->
    <div
        x-show="open"
        x-transition:enter="ease-out duration-200"
        x-transition:enter-start="opacity-0 scale-95"
        x-transition:enter-end="opacity-100 scale-100"
        x-transition:leave="ease-in duration-150"
        x-transition:leave-start="opacity-100 scale-100"
        x-transition:leave-end="opacity-0 scale-95"
        @mouseenter={trigger === 'hover' ? 'open = true' : ''}
        @mouseleave={trigger === 'hover' ? 'open = false' : ''}
        id={popupId}
        class={cn(
            popupVariants({ size, theme, placement }),
            className,
            contentClassName
        )}
        style="display: none;"
        role="dialog"
        :aria-labelledby="'${popupId}-title'"
    >
        
        <!-- Content -->
        <div class="relative">
            <!-- Slot content -->
            <slot name="content" />
            <slot />
        </div>
    </div>
</div>
