---
import { cn } from '@/lib/utils';

export interface Props {
    currentPage?: number;
    totalPages?: number;
    totalItems?: number;
    pageSize?: number;
    maxVisible?: number;
    showInfo?: boolean;
    showFirstLast?: boolean;
    class?: string;
    [key: string]: any;
}

const {
    currentPage = 1,
    totalPages = 1,
    totalItems = 0,
    pageSize = 10,
    maxVisible = 5,
    showInfo = true,
    showFirstLast = true,
    class: className,
    ...alpineProps
} = Astro.props;

// Alpine store for pagination state
const alpineStore = `{
  currentPage: ${currentPage},
  totalPages: ${totalPages},
  totalItems: ${totalItems},
  pageSize: ${pageSize},
  maxVisible: ${maxVisible},
  showInfo: ${showInfo},
  showFirstLast: ${showFirstLast},
  
  get visiblePages() {
    const pages = [];
    const start = Math.max(1, this.currentPage - Math.floor(this.maxVisible / 2));
    const end = Math.min(this.totalPages, start + this.maxVisible - 1);
    
    // Add first page + ellipsis if needed
    if (this.showFirstLast && start > 1) {
      pages.push({ number: 1, current: false, isEllipsis: false });
      if (start > 2) {
        pages.push({ number: '...', current: false, isEllipsis: true });
      }
    }
    
    // Add visible page range
    for (let i = start; i <= end; i++) {
      pages.push({ number: i, current: i === this.currentPage, isEllipsis: false });
    }
    
    // Add ellipsis + last page if needed
    if (this.showFirstLast && end < this.totalPages) {
      if (end < this.totalPages - 1) {
        pages.push({ number: '...', current: false, isEllipsis: true });
      }
      pages.push({ number: this.totalPages, current: false, isEllipsis: false });
    }
    
    return pages;
  },
  
  get hasPrevious() {
    return this.currentPage > 1;
  },
  
  get hasNext() {
    return this.currentPage < this.totalPages;
  },
  
  get startItem() {
    return (this.currentPage - 1) * this.pageSize + 1;
  },
  
  get endItem() {
    return Math.min(this.currentPage * this.pageSize, this.totalItems);
  },
  
  goToPage(page) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.$dispatch('page-change', { page });
    }
  },
  
  nextPage() {
    this.goToPage(this.currentPage + 1);
  },
  
  previousPage() {
    this.goToPage(this.currentPage - 1);
  }
}`;
---

<div
    class={cn('flex flex-row', className)}
    x-data={alpineStore}
    {...alpineProps}
>
    <slot />
</div>
