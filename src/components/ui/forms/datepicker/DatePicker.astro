---
export interface Props {
  // Date formatting for display
  format?: string;
  
  // Form integration
  name?: string;
  
  // Styling
  className?: string;
  
  // Alpine.js pass-through
  [key: string]: any;
}

const {
  format = 'Y-m-d',
  name,
  className,
  ...alpineProps
} = Astro.props;
---

<!-- 
DatePicker Component - Clean named slots implementation

Usage:
<DatePicker format="Y-m-d" name="birthdate">
  <Button slot="trigger">
    <Calendar className="mr-2 h-4 w-4" />
    <span x-text="formattedDate || 'Select date'"></span>
  </Button>
  <Calendar slot="content" mode="single" numberOfMonths={1} />
</DatePicker>

Features:
- Named slots for clean composition
- Direct Calendar prop passing (no intermediate components)
- Automatic popup behavior with outside click detection
- Form integration with hidden input
- Flexible date formatting
-->
<div
  x-data={`{
    open: false,
    selectedDate: null,
    formattedDate: '',
    format: '${format}',
    
    init() {
      // Close on click outside
      document.addEventListener('click', (e) => {
        if (!this.$el.contains(e.target)) {
          this.open = false;
        }
      });
      
      // Listen for date selection from Calendar
      this.$el.addEventListener('date-selected', (e) => {
        this.selectedDate = e.detail.date;
        this.updateFormattedDate();
        this.open = false; // Close on selection
      });
    },
    
    updateFormattedDate() {
      if (!this.selectedDate) {
        this.formattedDate = '';
        return;
      }
      
      // Handle range mode
      if (this.selectedDate && typeof this.selectedDate === 'object' && this.selectedDate.from) {
        const fromDate = new Date(this.selectedDate.from);
        const toDate = this.selectedDate.to ? new Date(this.selectedDate.to) : null;
        
        const fromFormatted = this.formatSingleDate(fromDate);
        if (toDate) {
          const toFormatted = this.formatSingleDate(toDate);
          this.formattedDate = fromFormatted + ' - ' + toFormatted;
        } else {
          this.formattedDate = fromFormatted + ' - ...';
        }
        return;
      }
      
      // Handle single date
      const date = new Date(this.selectedDate);
      this.formattedDate = this.formatSingleDate(date);
    },
    
    formatSingleDate(date) {
      if (this.format === 'M j, Y') {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
      } else if (this.format === 'm/d/Y') {
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return month + '/' + day + '/' + date.getFullYear();
      } else {
        // Default: Y-m-d
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return year + '-' + month + '-' + day;
      }
    }
  }`}
  x-init="init()"
  class={`relative inline-block ${className || ''}`}
  {...alpineProps}
>
  <!-- Hidden input for form submission -->
  {name && <input type="hidden" name={name} x-model="formattedDate" />}
  
  <!-- Trigger -->
  <div @click="open = !open">
    <slot name="trigger">
      <button type="button" class="px-3 py-2 border border-gray-300 rounded-md">
        <span x-text="formattedDate || 'Select date'"></span>
      </button>
    </slot>
  </div>
  
  <!-- Popup Content -->
  <div
    x-show="open"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    class="absolute z-50 mt-2"
    style="display: none;"
  >
    <slot name="content" />
  </div>
</div>
