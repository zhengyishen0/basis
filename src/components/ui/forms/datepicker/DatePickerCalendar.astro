---
// DatePickerCalendar - Simple wrapper that accesses parent DatePicker Alpine.js scope
// Similar to how RadioGroupItem accesses RadioGroup scope

export interface Props {
  className?: string;
  [key: string]: any;
}

const { className, ...alpineProps } = Astro.props;
---

<!-- 
DatePickerCalendar - Alpine.js scope accessor
Accesses parent DatePicker's Alpine.js data naturally (like RadioGroupItem)
No build-time props needed - everything comes from parent scope
-->
<div
  x-data={`{
    // Access parent DatePicker scope
    get parentMode() { return this.$parent?.mode || 'single'; },
    get parentNumberOfMonths() { return this.$parent?.numberOfMonths || 1; },
    get parentSelected() { return this.$parent?.selectedDate || null; },
    
    // Calendar-specific state
    currentMonth: new Date().getMonth(),
    currentYear: new Date().getFullYear(),
    monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    months: [],
    
    init() {
      console.log('DatePickerCalendar init - mode:', this.parentMode, 'numberOfMonths:', this.parentNumberOfMonths);
      this.generateCalendar();
      
      // Watch parent's selectedDate
      this.$watch('parentSelected', () => {
        this.generateCalendar();
      });
    },
    
    generateCalendar() {
      this.months = [];
      
      for (let monthOffset = 0; monthOffset < this.parentNumberOfMonths; monthOffset++) {
        const monthDate = new Date(this.currentYear, this.currentMonth + monthOffset, 1);
        const year = monthDate.getFullYear();
        const month = monthDate.getMonth();
        
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        
        let startDay = firstDay.getDay();
        const blankDays = Array.from({ length: startDay }, (_, i) => {
          const date = new Date(year, month, -(startDay - i - 1));
          return { date, day: date.getDate(), isOutside: true };
        });
        
        const monthDays = Array.from({ length: daysInMonth }, (_, i) => {
          const date = new Date(year, month, i + 1);
          return {
            date,
            day: i + 1,
            isOutside: false,
            isToday: this.isToday(date),
            isSelected: this.isSelected(date),
            isDisabled: false
          };
        });
        
        const allDays = [...blankDays, ...monthDays];
        const remainingCells = 42 - allDays.length;
        
        for (let i = 1; i <= remainingCells; i++) {
          const date = new Date(year, month + 1, i);
          allDays.push({
            date,
            day: i,
            isOutside: true,
            isNextMonth: true
          });
        }
        
        this.months.push({
          year,
          month,
          monthName: this.monthNames[month],
          blankDays,
          monthDays,
          allDays
        });
      }
    },
    
    isToday(date) {
      const today = new Date();
      return date.toDateString() === today.toDateString();
    },
    
    isSelected(date) {
      if (!this.parentSelected) return false;
      
      if (this.parentMode === 'single') {
        return this.parentSelected && new Date(this.parentSelected).toDateString() === date.toDateString();
      } else if (this.parentMode === 'range') {
        if (!this.parentSelected || !this.parentSelected.from) return false;
        const from = new Date(this.parentSelected.from);
        const to = this.parentSelected.to ? new Date(this.parentSelected.to) : null;
        
        if (!to) return date.toDateString() === from.toDateString();
        return date >= from && date <= to;
      }
      return false;
    },
    
    isRangeStart(date) {
      if (this.parentMode !== 'range' || !this.parentSelected || !this.parentSelected.from) return false;
      const from = new Date(this.parentSelected.from);
      return date.toDateString() === from.toDateString();
    },
    
    isRangeEnd(date) {
      if (this.parentMode !== 'range' || !this.parentSelected || !this.parentSelected.to) return false;
      const to = new Date(this.parentSelected.to);
      return date.toDateString() === to.toDateString();
    },
    
    isInRange(date) {
      if (this.parentMode !== 'range' || !this.parentSelected || !this.parentSelected.from) return false;
      const from = new Date(this.parentSelected.from);
      const to = this.parentSelected.to ? new Date(this.parentSelected.to) : null;
      
      if (!to) return false;
      return date > from && date < to;
    },
    
    selectDate(date) {
      if (this.parentMode === 'single') {
        this.$parent.selectedDate = date;
      } else if (this.parentMode === 'range') {
        if (!this.parentSelected || !this.parentSelected.from || (this.parentSelected.from && this.parentSelected.to)) {
          this.$parent.selectedDate = { from: date, to: null };
        } else {
          if (date >= new Date(this.parentSelected.from)) {
            this.$parent.selectedDate = { ...this.parentSelected, to: date };
          } else {
            this.$parent.selectedDate = { from: date, to: this.parentSelected.from };
          }
        }
      }
      
      this.generateCalendar();
    },
    
    previousMonth() {
      if (this.currentMonth === 0) {
        this.currentMonth = 11;
        this.currentYear--;
      } else {
        this.currentMonth--;
      }
      this.generateCalendar();
    },
    
    nextMonth() {
      if (this.currentMonth === 11) {
        this.currentMonth = 0;
        this.currentYear++;
      } else {
        this.currentMonth++;
      }
      this.generateCalendar();
    }
  }`}
  x-init="init()"
  class={`inline-block bg-background text-foreground border border-border rounded-lg shadow-sm w-fit ${className || ''}`}
  {...alpineProps}
>
  <!-- Single Month Header -->
  <div class="calendar-header flex items-center justify-between mb-4 p-3" x-show="parentNumberOfMonths === 1">
    <button @click="previousMonth()" type="button" class="p-1 hover:bg-accent hover:text-accent-foreground rounded-md transition-colors">
      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
      </svg>
    </button>
    <div class="font-semibold text-center flex-1">
      <span x-text="`${monthNames[currentMonth]} ${currentYear}`"></span>
    </div>
    <button @click="nextMonth()" type="button" class="p-1 hover:bg-accent hover:text-accent-foreground rounded-md transition-colors">
      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
      </svg>
    </button>
  </div>

  <!-- Calendar Body -->
  <div class="calendar-body p-3">
    <!-- Single Month View -->
    <template x-if="parentNumberOfMonths === 1">
      <div class="single-month">
        <!-- Weekday Headers -->
        <div class="grid grid-cols-7 mb-2 w-full">
          <template x-for="day in dayNames" :key="day">
            <div class="calendar-weekday flex items-center justify-center font-medium text-muted-foreground h-8 text-sm">
              <span x-text="day"></span>
            </div>
          </template>
        </div>

        <!-- Calendar Grid -->
        <div class="calendar-grid grid grid-cols-7 w-full gap-1">
          <template x-for="day in months[0]?.allDays || []" :key="`day-${day.day}-${day.isOutside}`">
            <button
              @click="!day.isOutside && selectDate(day.date)"
              type="button"
              class="calendar-day flex items-center justify-center rounded-md hover:bg-accent hover:text-accent-foreground transition-colors h-9 w-9"
              :class="{
                'text-muted-foreground/50': day.isOutside,
                'bg-primary text-primary-foreground hover:bg-primary/90': isSelected(day.date),
                'bg-primary/20 text-primary': isInRange(day.date),
                'bg-primary text-primary-foreground rounded-l-md rounded-r-none': isRangeStart(day.date) && parentMode === 'range',
                'bg-primary text-primary-foreground rounded-r-md rounded-l-none': isRangeEnd(day.date) && parentMode === 'range',
                'bg-accent text-accent-foreground': isToday(day.date) && !isSelected(day.date),
                'font-semibold': isToday(day.date)
              }"
            >
              <span x-text="day.day"></span>
            </button>
          </template>
        </div>
      </div>
    </template>

    <!-- Multi-Month View -->
    <template x-if="parentNumberOfMonths > 1">
      <div class="grid gap-6 grid-flow-col auto-cols-fr">
        <template x-for="(monthData, monthIndex) in months" :key="`month-${monthIndex}`">
          <div class="month-container">
            <!-- Month Header -->
            <div class="month-header flex items-center justify-between mb-3">
              <template x-if="monthIndex === 0">
                <button @click="previousMonth()" type="button" class="p-1 hover:bg-accent hover:text-accent-foreground rounded-md transition-colors">
                  <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                  </svg>
                </button>
              </template>
              <template x-if="monthIndex !== 0">
                <div class="w-8"></div>
              </template>

              <div class="font-semibold text-center flex-1">
                <span x-text="`${monthData.monthName} ${monthData.year}`"></span>
              </div>

              <template x-if="monthIndex === parentNumberOfMonths - 1">
                <button @click="nextMonth()" type="button" class="p-1 hover:bg-accent hover:text-accent-foreground rounded-md transition-colors">
                  <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                  </svg>
                </button>
              </template>
              <template x-if="monthIndex !== parentNumberOfMonths - 1">
                <div class="w-8"></div>
              </template>
            </div>

            <!-- Weekday Headers -->
            <div class="grid grid-cols-7 mb-2 w-full">
              <template x-for="day in dayNames" :key="`${monthIndex}-${day}`">
                <div class="calendar-weekday flex items-center justify-center font-medium text-muted-foreground h-8 text-sm">
                  <span x-text="day"></span>
                </div>
              </template>
            </div>

            <!-- Month Grid -->
            <div class="calendar-grid grid grid-cols-7 w-full gap-1">
              <template x-for="day in monthData.allDays" :key="`${monthIndex}-day-${day.day}-${day.isOutside}`">
                <button
                  @click="!day.isOutside && selectDate(day.date)"
                  type="button"
                  class="calendar-day flex items-center justify-center rounded-md hover:bg-accent hover:text-accent-foreground transition-colors h-9 w-9"
                  :class="{
                    'text-muted-foreground/50': day.isOutside,
                    'bg-primary text-primary-foreground hover:bg-primary/90': isSelected(day.date),
                    'bg-primary/20 text-primary': isInRange(day.date),
                    'bg-primary text-primary-foreground rounded-l-md rounded-r-none': isRangeStart(day.date) && parentMode === 'range',
                    'bg-primary text-primary-foreground rounded-r-md rounded-l-none': isRangeEnd(day.date) && parentMode === 'range',
                    'bg-accent text-accent-foreground': isToday(day.date) && !isSelected(day.date),
                    'font-semibold': isToday(day.date)
                  }"
                >
                  <span x-text="day.day"></span>
                </button>
              </template>
            </div>
          </div>
        </template>
      </div>
    </template>
  </div>
</div>