---
import { cn } from '@/lib/utils';
import { createUIComponent, type UIComponentProps, type VariantProps } from '@/lib/component-variants';
import RadioIndicator from '@/components/ui/indicators/RadioIndicator.astro';

const radioGroupItemVariants = createUIComponent(
    'radio-option group flex gap-3 p-4 border border-border rounded-lg transition-all duration-300 ease-out transform-gpu hover:border-primary/50 hover:bg-primary/5 has-[:checked]:border-primary has-[:checked]:bg-primary/10',
    {
        variant: {
            default: 'cursor-pointer',
            disabled: 'cursor-not-allowed opacity-50 hover:border-border hover:bg-transparent',
        },
        layout: {
            vertical: 'items-start',
            horizontal: 'items-center',
        }
    }
);

export interface Props extends UIComponentProps, VariantProps<typeof radioGroupItemVariants> {
    value: string;
    disabled?: boolean;
    layout?: 'vertical' | 'horizontal';
    variant?: 'default' | 'disabled';
}

const {
    value,
    disabled = false,
    layout = 'vertical',
    size,
    padding,
    elevation,
    variant,
    class: className,
    ...alpineProps
} = Astro.props;

// Extract x-for and x-key from alpineProps so they don't get passed to the label
const { 'x-for': xFor, 'x-key': xKey, ...restProps } = alpineProps;

// Determine the actual variant based on disabled state
const actualVariant = disabled ? 'disabled' : (variant || 'default');
---

{
    xFor ? (
        <template x-for={xFor} x-key={xKey}>
            <label
                x-data="{ id: $id('radio'), itemDisabled: (disabled || option.disabled) }"
                @click="!disabled && !option.disabled && setSelectedOption(option.value)"
                {...restProps}
                class="radio-option group flex gap-3 p-4 border border-border rounded-lg transition-all duration-300 ease-out transform-gpu has-[:checked]:border-primary has-[:checked]:bg-primary/10"
                :class="[
                    (disabled || option.disabled) ? '' : 'hover:border-primary/50 hover:bg-primary/5',
                    (disabled || option.disabled) ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
                ]"
                x-cloak
            >
                <!-- Radio input (hidden but functional) -->
                <input
                    type="radio"
                    :name="name"
                    :value="option.value"
                    class="sr-only peer"
                    :disabled="disabled || option.disabled"
                    x-model="selectedOption"
                />
                
                <!-- Radio visual indicator -->
                <div class="mt-0.5 has-[p]:mt-1">
                    <RadioIndicator
                        :checked="selectedOption === option.value"
                        :disabled="disabled || option.disabled"
                    />
                </div>

                <!-- Content area -->
                <div class="radio-content flex-1 min-w-0">
                    <slot />
                </div>
            </label>
        </template>
    ) : (
        <label
            x-data="{ id: $id('radio'), itemDisabled: disabled }"
            @click={`!disabled && setSelectedOption('${value}')`}
            {...restProps}
            class="radio-option group flex gap-3 p-4 border border-border rounded-lg transition-all duration-300 ease-out transform-gpu has-[:checked]:border-primary has-[:checked]:bg-primary/10 items-start"
            :class="disabled ? 'cursor-not-allowed opacity-50' : 'cursor-pointer hover:border-primary/50 hover:bg-primary/5'"
            x-cloak
        >
            <!-- Radio input (hidden but functional) -->
            <input
                type="radio"
                :name="name"
                :value={`'${value}'`}
                class="sr-only peer"
                :disabled="disabled"
                x-model="selectedOption"
            />
            
            <!-- Radio visual indicator -->
            <div class="mt-0.5 has-[p]:mt-1">
                <RadioIndicator
                    :checked={`selectedOption === '${value}'`}
                    :disabled="disabled"
                />
            </div>

            <!-- Content area -->
            <div class="radio-content flex-1 min-w-0">
                <slot />
            </div>
        </label>
    )
}