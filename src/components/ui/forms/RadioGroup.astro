---
import { cn } from '@/lib/utils';
import { universalVariants } from '@/lib/component-variants';

export interface Props {
  name: string;
  options: Array<{
    value: string;
    title: string;
    description?: string;
    disabled?: boolean;
  }>;
  selectedValue?: string;
  disabled?: boolean;
  class?: string;
  // Alpine.js pass-through
  [key: string]: any;
}

const { 
  name,
  options,
  selectedValue = '',
  disabled = false,
  class: className = "",
  ...alpineProps
} = Astro.props;
---

<!-- 
Radio Group Component - Modernized with primary theme and smooth animations

Usage:
<RadioGroup 
  name="plan"
  options={[
    { 
      value: "basic", 
      title: "Basic Plan", 
      description: "Perfect for small teams" 
    },
    { 
      value: "pro", 
      title: "Pro Plan", 
      description: "Best for growing businesses",
      disabled: true
    }
  ]}
  selectedValue="basic"
/>

Features:
- Primary color theme only
- Smooth animations matching checkbox
- Disabled state support
- Alpine.js powered selection
- Optional descriptions per option
- Accessible radio group
-->

<div 
  x-data={`{ selectedValue: '${selectedValue}' }`}
  class={cn('radio-group space-y-3', className)}
  {...alpineProps}
>
  {options.map(option => (
    <label 
      for={`${name}-${option.value}`}
      class={cn(
        'radio-option group cursor-pointer',
        'flex gap-3 p-4',
        option.description ? 'items-start' : 'items-center',
        'border border-border rounded-lg',
        'transition-all duration-300 ease-out transform-gpu',
        'hover:border-primary/50 hover:bg-primary/5',
        'has-[:checked]:border-primary has-[:checked]:bg-primary/10',
        'has-[:disabled]:opacity-50 has-[:disabled]:cursor-not-allowed has-[:disabled]:hover:border-border has-[:disabled]:hover:bg-transparent'
      )}
    >
      <!-- Custom radio button -->
      <div class={cn(
        'radio-input-wrapper relative',
        option.description ? 'mt-0.5' : ''
      )}>
        <input 
          id={`${name}-${option.value}`}
          name={name}
          type="radio" 
          value={option.value}
          checked={selectedValue === option.value}
          disabled={disabled || option.disabled}
          class="sr-only peer"
          x-model="selectedValue"
        />
        <div 
          class={cn(
            'relative flex items-center justify-center shrink-0 transform-gpu',
            'rounded-full bg-background transition-all duration-300 ease-out',
            'h-5 w-5',
            universalVariants.borderWidth.thin,
            'border-primary',
            'peer-checked:border-primary peer-checked:scale-105',
            'peer-focus-visible:ring-2 peer-focus-visible:ring-ring peer-focus-visible:ring-offset-2',
            'peer-disabled:opacity-50 peer-disabled:cursor-not-allowed',
            'group-hover:border-primary/80'
          )}
        >
          <!-- Radio dot indicator -->
          <div
            class="h-3 w-3 bg-primary rounded-full transition-all duration-300 ease-out transform-gpu"
            :class={`selectedValue === '${option.value}' ? 'opacity-100 scale-100' : 'opacity-0 scale-0'`}
          ></div>
        </div>
      </div>
      
      <!-- Option content -->
      <div class="radio-content flex-1 min-w-0">
        <div 
          class={cn(
            'radio-title font-medium text-foreground leading-none',
            'group-has-[:disabled]:opacity-50 transition-colors duration-200'
          )}
        >
          {option.title}
        </div>
        {option.description && (
          <p 
            class={cn(
              'radio-description text-sm text-muted-foreground mt-1',
              'group-has-[:disabled]:opacity-50 transition-colors duration-200'
            )}
          >
            {option.description}
          </p>
        )}
      </div>
    </label>
  ))}
</div>