---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { Calendar as CalendarIcon } from 'lucide-astro';
import Button from '@/components/ui/forms/Button.astro';
import Popup from '@/components/ui/overlay/popup/Popup.astro';
import PopupTrigger from '@/components/ui/overlay/popup/PopupTrigger.astro';
import PopupContent from '@/components/ui/overlay/popup/PopupContent.astro';
import Calendar from '@/components/ui/display/Calendar.astro';

const datePickerVariants = cva(
  'relative',
  {
    variants: {
      variant: {
        default: '',
        outline: '',
        ghost: ''
      },
      size: {
        sm: '',
        md: '',
        lg: ''
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'md'
    }
  }
);

export interface Props extends VariantProps<typeof datePickerVariants> {
  // Basic props
  name?: string;
  value?: string | Date;
  placeholder?: string;
  disabled?: boolean;
  readonly?: boolean;
  
  // Date formatting
  format?: string;
  
  // Calendar props
  mode?: 'single' | 'range' | 'multiple';
  minDate?: Date;
  maxDate?: Date;
  disabledDates?: string; // Alpine.js function name
  
  // Calendar appearance
  calendarVariant?: 'default' | 'outline' | 'minimal';
  calendarSize?: 'sm' | 'md' | 'lg';
  captionLayout?: 'buttons' | 'dropdown';
  showOutsideDays?: boolean;
  numberOfMonths?: number;
  
  // Event handlers
  onSelect?: string; // Alpine.js function name
  onChange?: string; // Alpine.js function name
  
  // Styling
  className?: string;
  buttonClassName?: string;
  calendarClassName?: string;
  
  // Alpine.js pass-through
  [key: string]: any;
}

const {
  name = 'date',
  value = '',
  placeholder = 'Select a date',
  disabled = false,
  readonly = false,
  format = 'Y-m-d',
  mode = 'single',
  minDate,
  maxDate,
  disabledDates,
  calendarVariant = 'default',
  calendarSize = 'md',
  captionLayout = 'buttons',
  showOutsideDays = true,
  numberOfMonths = 1,
  onSelect = 'handleDateSelect',
  onChange = 'handleDateChange',
  variant,
  size,
  className,
  buttonClassName,
  calendarClassName,
  ...alpineProps
} = Astro.props;

// Generate unique IDs
const datePickerId = `datepicker-${Math.random().toString(36).substring(2, 11)}`;
---

<!-- 
Modern DatePicker Component - Integrated with Button, Popup & Calendar

Usage:
<DatePicker 
  name="birthdate" 
  placeholder="Select your birthdate"
  format="Y-m-d"
  mode="single"
/>

<DatePicker 
  name="date_range" 
  placeholder="Select date range"
  mode="range"
  calendarSize="lg"
  captionLayout="dropdown"
/>

Features:
- Composable design using Button + Popup + Calendar
- Multiple selection modes: single, range, multiple
- CVA variant system integration
- Customizable calendar appearance
- Date validation and constraints
- Keyboard navigation and accessibility
- Alpine.js powered state management
-->

<div
  x-data={`{
    selectedDate: ${value ? (typeof value === 'string' ? `'${value}'` : `new Date('${value.toISOString()}')`) : 'null'},
    formattedDate: '',
    format: '${format}',
    
    init() {
      this.updateFormattedDate();
    },
    
    updateFormattedDate() {
      if (!this.selectedDate) {
        this.formattedDate = '';
        return;
      }
      
      // Handle range mode
      if (this.selectedDate && typeof this.selectedDate === 'object' && this.selectedDate.from) {
        const fromDate = new Date(this.selectedDate.from);
        const toDate = this.selectedDate.to ? new Date(this.selectedDate.to) : null;
        
        if (isNaN(fromDate.getTime())) {
          this.formattedDate = '';
          return;
        }
        
        const fromFormatted = this.formatSingleDate(fromDate);
        if (toDate && !isNaN(toDate.getTime())) {
          const toFormatted = this.formatSingleDate(toDate);
          this.formattedDate = fromFormatted + ' - ' + toFormatted;
        } else {
          this.formattedDate = fromFormatted + ' - ...';
        }
        return;
      }
      
      // Handle single date or array
      const date = Array.isArray(this.selectedDate) ? this.selectedDate[0] : this.selectedDate;
      if (!date) {
        this.formattedDate = '';
        return;
      }
      
      const dateObj = new Date(date);
      if (isNaN(dateObj.getTime())) {
        this.formattedDate = '';
        return;
      }
      
      this.formattedDate = this.formatSingleDate(dateObj);
    },
    
    formatSingleDate(date) {
      // Format the date based on format prop
      if (this.format === 'M j, Y') {
        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
      } else if (this.format === 'm/d/Y') {
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return month + '/' + day + '/' + date.getFullYear();
      } else if (this.format === 'j F Y') {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        return date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + date.getFullYear();
      } else {
        // Default: Y-m-d
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return year + '-' + month + '-' + day;
      }
    },
    
    handleDateSelect(date) {
      this.selectedDate = date;
      this.updateFormattedDate();
      
      // Call custom onSelect handler if provided
      if (typeof window !== 'undefined' && window.${onSelect} && typeof window.${onSelect} === 'function') {
        window.${onSelect}(date);
      }
      
      // Call custom onChange handler if provided
      if (typeof window !== 'undefined' && window.${onChange} && typeof window.${onChange} === 'function') {
        window.${onChange}(date, this.formattedDate);
      }
    }
  }`}
  x-init="init()"
  class={cn(datePickerVariants({ variant, size }), className)}
  {...alpineProps}
>
  <!-- Hidden input for form submission -->
  <input 
    type="hidden" 
    name={name}
    x-model="formattedDate"
  />
  
  <Popup trigger="click">
    <PopupTrigger>
      <Button
        variant="outline"
        size={size}
        disabled={disabled}
        className={cn(
          "justify-start text-left font-normal",
          !value && "text-muted-foreground",
          buttonClassName
        )}
      >
        <CalendarIcon className="mr-2 h-4 w-4" />
        <span x-text="formattedDate || '${placeholder}'"></span>
      </Button>
    </PopupTrigger>
    
    <PopupContent className="w-fit p-0" @date-selected="handleDateSelect($event.detail.date)">
      <Calendar
        mode={mode}
        selected={value}
        onSelect="handleDateSelect"
        disabled={disabledDates}
        minDate={minDate}
        maxDate={maxDate}
        variant={calendarVariant}
        size={calendarSize}
        captionLayout={captionLayout}
        showOutsideDays={showOutsideDays}
        numberOfMonths={numberOfMonths}
        className={calendarClassName}
      />
    </PopupContent>
  </Popup>
</div>