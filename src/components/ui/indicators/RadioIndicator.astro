---
import { cn } from '@/lib/utils';
import { cva, type VariantProps } from 'class-variance-authority';
import { semanticVariants, sizes, overflowVariants } from '@/lib/component-variants';

const radioIndicatorVariants = cva(
    'relative flex items-center justify-center shrink-0 transform-gpu rounded-full bg-background transition-all duration-300 ease-out h-5 w-5 border border-primary shadow-sm',
    {
        variants: {
            size: {
                sm: 'h-4 w-4',
                md: 'h-5 w-5',
                lg: 'h-6 w-6',
            },
            state: {
                default: '',
                checked: 'scale-105',
                disabled: 'opacity-50 cursor-not-allowed',
            },
            variant: semanticVariants,
            overflow: overflowVariants
        }
    }
);

export interface Props extends VariantProps<typeof radioIndicatorVariants> {
    checked?: boolean;
    disabled?: boolean;
    size?: 'sm' | 'md' | 'lg';
    name?: string;
    value?: string;
    class?: string;
    [key: string]: any; // Alpine.js pass-through
}

const {
    checked = false,
    disabled = false,
    size = 'md',
    state = 'default',
    variant = 'default',
    overflow = 'fixed',
    name,
    value,
    class: className,
    ...alpineProps
} = Astro.props;

// Extract checked and disabled expressions from alpineProps if they exist
const { ':checked': checkedExpr, ':disabled': disabledExpr, ...restAlpineProps } = alpineProps;

const dotSizes = {
    sm: 'h-2 w-2',
    md: 'h-3 w-3', 
    lg: 'h-4 w-4'
};
---

<!-- 
RadioIndicator Component

A reusable radio button visual indicator that can be used in various contexts.

Usage:
<RadioIndicator checked={true} />
<RadioIndicator :checked="selectedOption === 'value'" />
<RadioIndicator disabled={true} />

Features:
- Multiple sizes (sm, md, lg)
- Checked/unchecked states with smooth transitions
- Disabled state styling
- Alpine.js reactive support
-->

<div
    class="radio-input-wrapper relative"
    {...restAlpineProps}
>
    <div
        class={cn(
            radioIndicatorVariants({ size, state, variant, overflow }),
            className
        )}
        :class={`[
            ${checkedExpr || checked} ? 'border-primary scale-105' : 'border-primary',
            ${disabledExpr || disabled} ? 'opacity-50 cursor-not-allowed' : 'group-hover:border-primary/80'
        ]`}
    >
        <!-- Radio dot indicator -->
        <div
            class={cn(
                'bg-primary rounded-full transition-all duration-300 ease-out transform-gpu',
                dotSizes[size]
            )}
            :class={`${checkedExpr || checked} ? 'opacity-100 scale-100' : 'opacity-0 scale-0'`}
        >
        </div>
    </div>
</div>