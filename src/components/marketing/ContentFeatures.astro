---
/**
 * ContentFeatures Component
 * 
 * A flexible side-by-side feature sections component that alternates layout
 * for multiple feature blocks. Perfect for showcasing product features,
 * benefits, or services with supporting images.
 * 
 * Features:
 * - Alternating left/right image placement
 * - Benefit lists with checkmark icons
 * - Customizable spacing and padding
 * - Responsive design (stacked on mobile)
 * - Support for multiple feature sections
 * - Customizable checkmark colors and styling
 * - Flexible image positioning and sizing
 * 
 * Usage:
 * ```astro
 * <ContentFeatures
 *   features={[
 *     {
 *       id: "1",
 *       title: "Boost Productivity",
 *       description: "Build an atmosphere that creates productivity...",
 *       imageUrl: "https://example.com/productivity.png",
 *       imageAlt: "Productivity illustration",
 *       benefits: [
 *         "Maximize productivity and growth",
 *         "Speed past your competition",
 *         "Learn the top techniques"
 *       ],
 *       imagePosition: "right"
 *     }
 *   ]}
 * />
 * ```
 */

export interface Benefit {
  text: string;
  icon?: string;
}

export interface Feature {
  id: string;
  title: string;
  description?: string;
  imageUrl: string;
  imageAlt?: string;
  benefits?: (string | Benefit)[];
  imagePosition?: 'left' | 'right';
  titleClass?: string;
  descriptionClass?: string;
  imageClass?: string;
  benefitsClass?: string;
  checkmarkColor?: string;
}

export interface Props {
  features: Feature[];
  containerClass?: string;
  sectionSpacing?: string;
  checkmarkColor?: string;
  alternateLayout?: boolean;
}

const {
  features = [],
  containerClass = "",
  sectionSpacing = "mt-2 md:mt-20 xl:mt-0",
  checkmarkColor = "bg-yellow-300",
  alternateLayout = true
} = Astro.props;

// Function to determine image position
const getImagePosition = (feature: Feature, index: number): 'left' | 'right' => {
  if (feature.imagePosition) {
    return feature.imagePosition;
  }
  
  if (alternateLayout) {
    return index % 2 === 0 ? 'right' : 'left';
  }
  
  return 'right';
};

// Function to normalize benefits
const normalizeBenefits = (benefits: (string | Benefit)[] = []): Benefit[] => {
  return benefits.map(benefit => 
    typeof benefit === 'string' ? { text: benefit } : benefit
  );
};
---

<section class={`w-full bg-white pt-7 pb-7 md:pt-20 md:pb-24 ${containerClass}`}>
    {features.map((feature, index) => {
        const imagePosition = getImagePosition(feature, index);
        const normalizedBenefits = normalizeBenefits(feature.benefits);
        const isFirstSection = index === 0;
        const marginTop = isFirstSection ? "" : sectionSpacing;
        
        return (
            <div class={`box-border flex flex-col items-center content-center px-8 mx-auto leading-6 text-black border-0 border-gray-300 border-solid md:flex-row max-w-7xl lg:px-16 ${marginTop}`}>

                {/* Content Section */}
                <div class={`box-border ${imagePosition === 'right' ? 'order-first md:order-none' : ''} w-full text-black border-solid md:w-1/2 ${imagePosition === 'right' ? 'md:pl-6 xl:pl-32' : 'md:pr-10'}`}>
                    {/* Title */}
                    <h2 class={`m-0 text-xl font-semibold leading-tight border-0 border-gray-300 lg:text-3xl md:text-2xl ${feature.titleClass || ''}`}>
                        {feature.title}
                    </h2>
                    
                    {/* Description */}
                    {feature.description && (
                        <p class={`pt-4 pb-8 m-0 leading-7 text-gray-700 border-0 border-gray-300 sm:pr-10 lg:text-lg ${feature.descriptionClass || ''}`}>
                            {feature.description}
                        </p>
                    )}
                    
                    {/* Benefits List */}
                    {normalizedBenefits.length > 0 && (
                        <ul class={`p-0 m-0 leading-6 border-0 border-gray-300 ${feature.benefitsClass || ''}`}>
                            {normalizedBenefits.map((benefit) => (
                                <li class="box-border relative py-1 pl-0 text-left text-gray-500 border-solid">
                                    <span class={`inline-flex items-center justify-center w-6 h-6 mr-2 text-white ${feature.checkmarkColor || checkmarkColor} rounded-full`} data-primary="yellow-400">
                                        <span class="text-sm font-bold">{benefit.icon || 'âœ“'}</span>
                                    </span> 
                                    {benefit.text}
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
                
                {/* Image Section */}
                <div class={`box-border relative w-full max-w-md px-4 ${imagePosition === 'right' ? 'mt-5 mb-4 -ml-5 md:ml-0 md:mt-0' : 'mt-10 mb-4'} text-center bg-no-repeat bg-contain border-solid md:max-w-none lg:mb-0 md:w-1/2 ${imagePosition === 'right' ? 'xl:pl-10' : 'xl:pl-10 lg:pr-32'}`}>
                    <img 
                        src={feature.imageUrl} 
                        alt={feature.imageAlt || feature.title}
                        class={`${imagePosition === 'right' ? 'p-2 pl-6 pr-5 xl:pl-16 xl:pr-20' : 'pl-4 sm:pr-10 xl:pl-10 lg:pr-32'} ${feature.imageClass || ''}`} 
                    />
                </div>
                
            </div>
        );
    })}
</section>